    morpho <- readDiscreteCharacterData("data/Cinctans.nex")
    taxonData <- readTaxonData(file="data/cincta_fossil_intervals_FA.tsv")
    # Get the names and number of species in the analysis
    taxa <- morpho.names()
    num_taxa <- morpho.size() 
    # Number of branches in a rooted tree = 2*(number of taxa) - 2
    num_branches <- 2 * num_taxa - 2
    # MCMC iterator variables
    moves = VectorMoves()
    monitors = VectorMonitors()
    origin_time ~ dnUnif(10.2, 15.2);
    # Set MCMC move on the parameter
    moves.append(mvSlide(origin_time, delta=0.01, weight=4))
    # Set up a monitor for the root age of the tree
    Root_age := origin_time
   phylogeny ~ dnUniformTimeTree(rootAge=origin_time, taxa=taxa)
   # Set MCMC moves for tree topology
   moves.append(mvFNPR(phylogeny, weight=num_branches/2.0))
   moves.append(mvNNI(phylogeny, weight=num_branches/2.0))
  
   # Set MCMC moves for node ages
   moves.append(mvNodeTimeSlideUniform(phylogeny, weight=num_branches/10))
   moves.append(mvRootTimeSlideUniform(phylogeny, origin_time, weight=5))

   # Set MCMC monitor for tree length
   tree_length := phylogeny.treeLength()
    alpha_morpho ~ dnUniform( 0, 1E6 )
    rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )
    #Moves on the parameters to the Gamma distribution.
    moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))
    # M
    ucln_mean ~ dnExponential(2.0)
    # sigma
    ucln_sigma ~ dnExponential(3.0) 
    # Set a deterministic node on sigma^2 
    ucln_var := ucln_sigma * ucln_sigma 
    # set deterministic parameter giving mu on branch rates
    ucln_mu := ln(ucln_mean) - (ucln_var * 0.5)
    # Set MCMC moves
    moves.append(mvScale(ucln_mean, lambda=1.0, tune=true, weight=4.0))
    moves.append(mvScale(ucln_sigma, lambda=0.5, tune=true, weight=4.0))

    # assign rates to branches and add mcmc move
    for (i in 1:num_branches){
        branch_rate_var[i] ~ dnLognormal(ucln_mu, ucln_sigma)
        moves.append(mvScale(branch_rate_var[i], lambda=1, tune=true, weight=2.0))
    }
    # As usual, we need to set MCMC moves on these parameters.
    moves.append(mvVectorScale(branch_rate_var,lambda=1.0,tune=true,weight=2.0))
    moves.append(mvVectorSingleElementScale(branch_rate_var,lambda=30.0,tune=true,weight=1.0))
n_max_states <- 3
idx = 1
morpho_bystate[1] <- morpho
for (c in 1:n_max_states) {
    # make local tmp copy of data
    # only keep character blocks with state space equal to size i
    morpho_bystate[c] <- morpho
    morpho_bystate[c].setNumStatesPartition(c)
    nc = morpho_bystate[c].nchar()
    # for non-empty character blocks
    if (nc > 0) {
        # make i-by-i rate matrix
        q[idx] <- fnJC(c)
        # create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny,
                                Q=q[idx],
                                nSites=nc,
                                siteRates=rates_morpho,
                                branchRates=branch_rate_var,
                                type="Standard")
        # attach the data
        m_morph[idx].clamp(morpho_bystate[c])
        # increment counter
        idx = idx + 1
  }
}
    mymodel = model(phylogeny)
    monitors.append(mnModel(filename="output/ucnl_relaxed_clock.log", printgen=10))
    monitors.append(mnFile(filename="output/ucln_relaxed_clock.trees", printgen=10, phylogeny))
    monitors.append(mnScreen(printgen=100))
    mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")
    mymcmc.run(generations=1000, tuningInterval=200)
    q()
